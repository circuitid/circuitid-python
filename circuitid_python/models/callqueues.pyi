# coding: utf-8

"""
    Circuit ID REST API

    # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!  # noqa: E501

    The version of the OpenAPI document: 0.47.15
    Contact: support@circuitid.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circuitid_python import schemas  # noqa: F401


class Callqueues(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "abandonedResumeAllowed",
            "maxNoAnswer",
            "callerResumeTimeout",
            "maxWaitTime",
            "moh",
            "tierRulesApply",
            "maxWaitTimeNoAgentTimeReached",
            "tierRuleNoAgentNoWait",
            "timeBasedScore",
            "maxWaitTimeNoAgent",
            "name",
            "strategy",
            "tierRuleWaitMultiplyLevel",
        }
        
        class properties:
            
            
            class name(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class strategy(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ring-all": "RINGALL",
                        "longest-idle-agent": "LONGESTIDLEAGENT",
                        "round-robin": "ROUNDROBIN",
                        "top-down": "TOPDOWN",
                        "agent-with-least-talk-time": "AGENTWITHLEASTTALKTIME",
                        "agent-with-fewest-calls": "AGENTWITHFEWESTCALLS",
                        "sequentially-by-agent-order": "SEQUENTIALLYBYAGENTORDER",
                        "random": "RANDOM",
                    }
                
                @schemas.classproperty
                def RINGALL(cls):
                    return cls("ring-all")
                
                @schemas.classproperty
                def LONGESTIDLEAGENT(cls):
                    return cls("longest-idle-agent")
                
                @schemas.classproperty
                def ROUNDROBIN(cls):
                    return cls("round-robin")
                
                @schemas.classproperty
                def TOPDOWN(cls):
                    return cls("top-down")
                
                @schemas.classproperty
                def AGENTWITHLEASTTALKTIME(cls):
                    return cls("agent-with-least-talk-time")
                
                @schemas.classproperty
                def AGENTWITHFEWESTCALLS(cls):
                    return cls("agent-with-fewest-calls")
                
                @schemas.classproperty
                def SEQUENTIALLYBYAGENTORDER(cls):
                    return cls("sequentially-by-agent-order")
                
                @schemas.classproperty
                def RANDOM(cls):
                    return cls("random")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'strategy':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class moh(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'moh':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class callerResumeTimeout(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'callerResumeTimeout':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class maxWaitTime(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'maxWaitTime':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class maxWaitTimeNoAgent(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'maxWaitTimeNoAgent':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class maxNoAnswer(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'maxNoAnswer':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class timeBasedScore(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "queue": "QUEUE",
                        "system": "SYSTEM",
                    }
                
                @schemas.classproperty
                def QUEUE(cls):
                    return cls("queue")
                
                @schemas.classproperty
                def SYSTEM(cls):
                    return cls("system")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'timeBasedScore':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tierRulesApply(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        schemas.BoolClass.TRUE: "TRUE",
                        schemas.BoolClass.FALSE: "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls(True)
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tierRulesApply':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tierRuleNoAgentNoWait(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        schemas.BoolClass.TRUE: "TRUE",
                        schemas.BoolClass.FALSE: "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls(True)
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tierRuleNoAgentNoWait':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tierRuleWaitMultiplyLevel(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        schemas.BoolClass.TRUE: "TRUE",
                        schemas.BoolClass.FALSE: "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls(True)
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tierRuleWaitMultiplyLevel':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class abandonedResumeAllowed(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        schemas.BoolClass.TRUE: "TRUE",
                        schemas.BoolClass.FALSE: "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls(True)
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'abandonedResumeAllowed':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class maxWaitTimeNoAgentTimeReached(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'maxWaitTimeNoAgentTimeReached':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class announcePosition(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'announcePosition':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class noAnswerDelayTimeout(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'noAnswerDelayTimeout':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rejectTimeout(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rejectTimeout':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class busyTimeout(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'busyTimeout':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class wrapUpTimeout(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'wrapUpTimeout':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tierRuleWaitSecond(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tierRuleWaitSecond':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class discardAbandonedAfter(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'discardAbandonedAfter':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "name": name,
                "strategy": strategy,
                "moh": moh,
                "callerResumeTimeout": callerResumeTimeout,
                "maxWaitTime": maxWaitTime,
                "maxWaitTimeNoAgent": maxWaitTimeNoAgent,
                "maxNoAnswer": maxNoAnswer,
                "timeBasedScore": timeBasedScore,
                "tierRulesApply": tierRulesApply,
                "tierRuleNoAgentNoWait": tierRuleNoAgentNoWait,
                "tierRuleWaitMultiplyLevel": tierRuleWaitMultiplyLevel,
                "abandonedResumeAllowed": abandonedResumeAllowed,
                "maxWaitTimeNoAgentTimeReached": maxWaitTimeNoAgentTimeReached,
                "announcePosition": announcePosition,
                "noAnswerDelayTimeout": noAnswerDelayTimeout,
                "rejectTimeout": rejectTimeout,
                "busyTimeout": busyTimeout,
                "wrapUpTimeout": wrapUpTimeout,
                "tierRuleWaitSecond": tierRuleWaitSecond,
                "discardAbandonedAfter": discardAbandonedAfter,
            }

    
    abandonedResumeAllowed: MetaOapg.properties.abandonedResumeAllowed
    maxNoAnswer: MetaOapg.properties.maxNoAnswer
    callerResumeTimeout: MetaOapg.properties.callerResumeTimeout
    maxWaitTime: MetaOapg.properties.maxWaitTime
    moh: MetaOapg.properties.moh
    tierRulesApply: MetaOapg.properties.tierRulesApply
    maxWaitTimeNoAgentTimeReached: MetaOapg.properties.maxWaitTimeNoAgentTimeReached
    tierRuleNoAgentNoWait: MetaOapg.properties.tierRuleNoAgentNoWait
    timeBasedScore: MetaOapg.properties.timeBasedScore
    maxWaitTimeNoAgent: MetaOapg.properties.maxWaitTimeNoAgent
    name: MetaOapg.properties.name
    strategy: MetaOapg.properties.strategy
    tierRuleWaitMultiplyLevel: MetaOapg.properties.tierRuleWaitMultiplyLevel
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategy"]) -> MetaOapg.properties.strategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moh"]) -> MetaOapg.properties.moh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callerResumeTimeout"]) -> MetaOapg.properties.callerResumeTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxWaitTime"]) -> MetaOapg.properties.maxWaitTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxWaitTimeNoAgent"]) -> MetaOapg.properties.maxWaitTimeNoAgent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxNoAnswer"]) -> MetaOapg.properties.maxNoAnswer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeBasedScore"]) -> MetaOapg.properties.timeBasedScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tierRulesApply"]) -> MetaOapg.properties.tierRulesApply: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tierRuleNoAgentNoWait"]) -> MetaOapg.properties.tierRuleNoAgentNoWait: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tierRuleWaitMultiplyLevel"]) -> MetaOapg.properties.tierRuleWaitMultiplyLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abandonedResumeAllowed"]) -> MetaOapg.properties.abandonedResumeAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxWaitTimeNoAgentTimeReached"]) -> MetaOapg.properties.maxWaitTimeNoAgentTimeReached: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["announcePosition"]) -> MetaOapg.properties.announcePosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noAnswerDelayTimeout"]) -> MetaOapg.properties.noAnswerDelayTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejectTimeout"]) -> MetaOapg.properties.rejectTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["busyTimeout"]) -> MetaOapg.properties.busyTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wrapUpTimeout"]) -> MetaOapg.properties.wrapUpTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tierRuleWaitSecond"]) -> MetaOapg.properties.tierRuleWaitSecond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discardAbandonedAfter"]) -> MetaOapg.properties.discardAbandonedAfter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "strategy", "moh", "callerResumeTimeout", "maxWaitTime", "maxWaitTimeNoAgent", "maxNoAnswer", "timeBasedScore", "tierRulesApply", "tierRuleNoAgentNoWait", "tierRuleWaitMultiplyLevel", "abandonedResumeAllowed", "maxWaitTimeNoAgentTimeReached", "announcePosition", "noAnswerDelayTimeout", "rejectTimeout", "busyTimeout", "wrapUpTimeout", "tierRuleWaitSecond", "discardAbandonedAfter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategy"]) -> MetaOapg.properties.strategy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moh"]) -> MetaOapg.properties.moh: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callerResumeTimeout"]) -> MetaOapg.properties.callerResumeTimeout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxWaitTime"]) -> MetaOapg.properties.maxWaitTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxWaitTimeNoAgent"]) -> MetaOapg.properties.maxWaitTimeNoAgent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxNoAnswer"]) -> MetaOapg.properties.maxNoAnswer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeBasedScore"]) -> MetaOapg.properties.timeBasedScore: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tierRulesApply"]) -> MetaOapg.properties.tierRulesApply: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tierRuleNoAgentNoWait"]) -> MetaOapg.properties.tierRuleNoAgentNoWait: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tierRuleWaitMultiplyLevel"]) -> MetaOapg.properties.tierRuleWaitMultiplyLevel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abandonedResumeAllowed"]) -> MetaOapg.properties.abandonedResumeAllowed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxWaitTimeNoAgentTimeReached"]) -> MetaOapg.properties.maxWaitTimeNoAgentTimeReached: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["announcePosition"]) -> typing.Union[MetaOapg.properties.announcePosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noAnswerDelayTimeout"]) -> typing.Union[MetaOapg.properties.noAnswerDelayTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejectTimeout"]) -> typing.Union[MetaOapg.properties.rejectTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["busyTimeout"]) -> typing.Union[MetaOapg.properties.busyTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wrapUpTimeout"]) -> typing.Union[MetaOapg.properties.wrapUpTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tierRuleWaitSecond"]) -> typing.Union[MetaOapg.properties.tierRuleWaitSecond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discardAbandonedAfter"]) -> typing.Union[MetaOapg.properties.discardAbandonedAfter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "strategy", "moh", "callerResumeTimeout", "maxWaitTime", "maxWaitTimeNoAgent", "maxNoAnswer", "timeBasedScore", "tierRulesApply", "tierRuleNoAgentNoWait", "tierRuleWaitMultiplyLevel", "abandonedResumeAllowed", "maxWaitTimeNoAgentTimeReached", "announcePosition", "noAnswerDelayTimeout", "rejectTimeout", "busyTimeout", "wrapUpTimeout", "tierRuleWaitSecond", "discardAbandonedAfter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        abandonedResumeAllowed: typing.Union[MetaOapg.properties.abandonedResumeAllowed, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        maxNoAnswer: typing.Union[MetaOapg.properties.maxNoAnswer, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        callerResumeTimeout: typing.Union[MetaOapg.properties.callerResumeTimeout, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        maxWaitTime: typing.Union[MetaOapg.properties.maxWaitTime, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        moh: typing.Union[MetaOapg.properties.moh, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tierRulesApply: typing.Union[MetaOapg.properties.tierRulesApply, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        maxWaitTimeNoAgentTimeReached: typing.Union[MetaOapg.properties.maxWaitTimeNoAgentTimeReached, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tierRuleNoAgentNoWait: typing.Union[MetaOapg.properties.tierRuleNoAgentNoWait, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        timeBasedScore: typing.Union[MetaOapg.properties.timeBasedScore, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        maxWaitTimeNoAgent: typing.Union[MetaOapg.properties.maxWaitTimeNoAgent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        strategy: typing.Union[MetaOapg.properties.strategy, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tierRuleWaitMultiplyLevel: typing.Union[MetaOapg.properties.tierRuleWaitMultiplyLevel, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        announcePosition: typing.Union[MetaOapg.properties.announcePosition, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        noAnswerDelayTimeout: typing.Union[MetaOapg.properties.noAnswerDelayTimeout, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        rejectTimeout: typing.Union[MetaOapg.properties.rejectTimeout, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        busyTimeout: typing.Union[MetaOapg.properties.busyTimeout, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        wrapUpTimeout: typing.Union[MetaOapg.properties.wrapUpTimeout, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        tierRuleWaitSecond: typing.Union[MetaOapg.properties.tierRuleWaitSecond, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        discardAbandonedAfter: typing.Union[MetaOapg.properties.discardAbandonedAfter, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Callqueues':
        return super().__new__(
            cls,
            *_args,
            abandonedResumeAllowed=abandonedResumeAllowed,
            maxNoAnswer=maxNoAnswer,
            callerResumeTimeout=callerResumeTimeout,
            maxWaitTime=maxWaitTime,
            moh=moh,
            tierRulesApply=tierRulesApply,
            maxWaitTimeNoAgentTimeReached=maxWaitTimeNoAgentTimeReached,
            tierRuleNoAgentNoWait=tierRuleNoAgentNoWait,
            timeBasedScore=timeBasedScore,
            maxWaitTimeNoAgent=maxWaitTimeNoAgent,
            name=name,
            strategy=strategy,
            tierRuleWaitMultiplyLevel=tierRuleWaitMultiplyLevel,
            announcePosition=announcePosition,
            noAnswerDelayTimeout=noAnswerDelayTimeout,
            rejectTimeout=rejectTimeout,
            busyTimeout=busyTimeout,
            wrapUpTimeout=wrapUpTimeout,
            tierRuleWaitSecond=tierRuleWaitSecond,
            discardAbandonedAfter=discardAbandonedAfter,
            _configuration=_configuration,
            **kwargs,
        )
