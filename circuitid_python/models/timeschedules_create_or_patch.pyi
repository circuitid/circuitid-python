# coding: utf-8

"""
    Circuit ID REST API

    # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!  # noqa: E501

    The version of the OpenAPI document: 0.47.22
    Contact: support@circuitid.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circuitid_python import schemas  # noqa: F401


class TimeschedulesCreateOrPatch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "sunday",
            "saturday",
            "tuesday",
            "timezone",
            "name",
            "friday",
            "thursday",
            "wednesday",
            "monday",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class timezone(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EUROPE_ANDORRA(cls):
                    return cls("Europe/Andorra")
                
                @schemas.classproperty
                def ASIA_DUBAI(cls):
                    return cls("Asia/Dubai")
                
                @schemas.classproperty
                def ASIA_KABUL(cls):
                    return cls("Asia/Kabul")
                
                @schemas.classproperty
                def EUROPE_TIRANE(cls):
                    return cls("Europe/Tirane")
                
                @schemas.classproperty
                def ASIA_YEREVAN(cls):
                    return cls("Asia/Yerevan")
                
                @schemas.classproperty
                def ANTARCTICA_CASEY(cls):
                    return cls("Antarctica/Casey")
                
                @schemas.classproperty
                def ANTARCTICA_DAVIS(cls):
                    return cls("Antarctica/Davis")
                
                @schemas.classproperty
                def ANTARCTICA_DUMONT_DURVILLE(cls):
                    return cls("Antarctica/DumontDUrville")
                
                @schemas.classproperty
                def ANTARCTICA_MAWSON(cls):
                    return cls("Antarctica/Mawson")
                
                @schemas.classproperty
                def ANTARCTICA_PALMER(cls):
                    return cls("Antarctica/Palmer")
                
                @schemas.classproperty
                def ANTARCTICA_ROTHERA(cls):
                    return cls("Antarctica/Rothera")
                
                @schemas.classproperty
                def ANTARCTICA_SYOWA(cls):
                    return cls("Antarctica/Syowa")
                
                @schemas.classproperty
                def ANTARCTICA_TROLL(cls):
                    return cls("Antarctica/Troll")
                
                @schemas.classproperty
                def ANTARCTICA_VOSTOK(cls):
                    return cls("Antarctica/Vostok")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_BUENOS_AIRES(cls):
                    return cls("America/Argentina/Buenos_Aires")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_CORDOBA(cls):
                    return cls("America/Argentina/Cordoba")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_SALTA(cls):
                    return cls("America/Argentina/Salta")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_JUJUY(cls):
                    return cls("America/Argentina/Jujuy")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_TUCUMAN(cls):
                    return cls("America/Argentina/Tucuman")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_CATAMARCA(cls):
                    return cls("America/Argentina/Catamarca")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_LA_RIOJA(cls):
                    return cls("America/Argentina/La_Rioja")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_SAN_JUAN(cls):
                    return cls("America/Argentina/San_Juan")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_MENDOZA(cls):
                    return cls("America/Argentina/Mendoza")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_SAN_LUIS(cls):
                    return cls("America/Argentina/San_Luis")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_RIO_GALLEGOS(cls):
                    return cls("America/Argentina/Rio_Gallegos")
                
                @schemas.classproperty
                def AMERICA_ARGENTINA_USHUAIA(cls):
                    return cls("America/Argentina/Ushuaia")
                
                @schemas.classproperty
                def PACIFIC_PAGO_PAGO(cls):
                    return cls("Pacific/Pago_Pago")
                
                @schemas.classproperty
                def EUROPE_VIENNA(cls):
                    return cls("Europe/Vienna")
                
                @schemas.classproperty
                def AUSTRALIA_LORD_HOWE(cls):
                    return cls("Australia/Lord_Howe")
                
                @schemas.classproperty
                def ANTARCTICA_MACQUARIE(cls):
                    return cls("Antarctica/Macquarie")
                
                @schemas.classproperty
                def AUSTRALIA_HOBART(cls):
                    return cls("Australia/Hobart")
                
                @schemas.classproperty
                def AUSTRALIA_CURRIE(cls):
                    return cls("Australia/Currie")
                
                @schemas.classproperty
                def AUSTRALIA_MELBOURNE(cls):
                    return cls("Australia/Melbourne")
                
                @schemas.classproperty
                def AUSTRALIA_SYDNEY(cls):
                    return cls("Australia/Sydney")
                
                @schemas.classproperty
                def AUSTRALIA_BROKEN_HILL(cls):
                    return cls("Australia/Broken_Hill")
                
                @schemas.classproperty
                def AUSTRALIA_BRISBANE(cls):
                    return cls("Australia/Brisbane")
                
                @schemas.classproperty
                def AUSTRALIA_LINDEMAN(cls):
                    return cls("Australia/Lindeman")
                
                @schemas.classproperty
                def AUSTRALIA_ADELAIDE(cls):
                    return cls("Australia/Adelaide")
                
                @schemas.classproperty
                def AUSTRALIA_DARWIN(cls):
                    return cls("Australia/Darwin")
                
                @schemas.classproperty
                def AUSTRALIA_PERTH(cls):
                    return cls("Australia/Perth")
                
                @schemas.classproperty
                def AUSTRALIA_EUCLA(cls):
                    return cls("Australia/Eucla")
                
                @schemas.classproperty
                def ASIA_BAKU(cls):
                    return cls("Asia/Baku")
                
                @schemas.classproperty
                def AMERICA_BARBADOS(cls):
                    return cls("America/Barbados")
                
                @schemas.classproperty
                def ASIA_DHAKA(cls):
                    return cls("Asia/Dhaka")
                
                @schemas.classproperty
                def EUROPE_BRUSSELS(cls):
                    return cls("Europe/Brussels")
                
                @schemas.classproperty
                def EUROPE_SOFIA(cls):
                    return cls("Europe/Sofia")
                
                @schemas.classproperty
                def ATLANTIC_BERMUDA(cls):
                    return cls("Atlantic/Bermuda")
                
                @schemas.classproperty
                def ASIA_BRUNEI(cls):
                    return cls("Asia/Brunei")
                
                @schemas.classproperty
                def AMERICA_LA_PAZ(cls):
                    return cls("America/La_Paz")
                
                @schemas.classproperty
                def AMERICA_NORONHA(cls):
                    return cls("America/Noronha")
                
                @schemas.classproperty
                def AMERICA_BELEM(cls):
                    return cls("America/Belem")
                
                @schemas.classproperty
                def AMERICA_FORTALEZA(cls):
                    return cls("America/Fortaleza")
                
                @schemas.classproperty
                def AMERICA_RECIFE(cls):
                    return cls("America/Recife")
                
                @schemas.classproperty
                def AMERICA_ARAGUAINA(cls):
                    return cls("America/Araguaina")
                
                @schemas.classproperty
                def AMERICA_MACEIO(cls):
                    return cls("America/Maceio")
                
                @schemas.classproperty
                def AMERICA_BAHIA(cls):
                    return cls("America/Bahia")
                
                @schemas.classproperty
                def AMERICA_SAO_PAULO(cls):
                    return cls("America/Sao_Paulo")
                
                @schemas.classproperty
                def AMERICA_CAMPO_GRANDE(cls):
                    return cls("America/Campo_Grande")
                
                @schemas.classproperty
                def AMERICA_CUIABA(cls):
                    return cls("America/Cuiaba")
                
                @schemas.classproperty
                def AMERICA_SANTAREM(cls):
                    return cls("America/Santarem")
                
                @schemas.classproperty
                def AMERICA_PORTO_VELHO(cls):
                    return cls("America/Porto_Velho")
                
                @schemas.classproperty
                def AMERICA_BOA_VISTA(cls):
                    return cls("America/Boa_Vista")
                
                @schemas.classproperty
                def AMERICA_MANAUS(cls):
                    return cls("America/Manaus")
                
                @schemas.classproperty
                def AMERICA_EIRUNEPE(cls):
                    return cls("America/Eirunepe")
                
                @schemas.classproperty
                def AMERICA_RIO_BRANCO(cls):
                    return cls("America/Rio_Branco")
                
                @schemas.classproperty
                def AMERICA_NASSAU(cls):
                    return cls("America/Nassau")
                
                @schemas.classproperty
                def ASIA_THIMPHU(cls):
                    return cls("Asia/Thimphu")
                
                @schemas.classproperty
                def EUROPE_MINSK(cls):
                    return cls("Europe/Minsk")
                
                @schemas.classproperty
                def AMERICA_BELIZE(cls):
                    return cls("America/Belize")
                
                @schemas.classproperty
                def AMERICA_ST_JOHNS(cls):
                    return cls("America/St_Johns")
                
                @schemas.classproperty
                def AMERICA_HALIFAX(cls):
                    return cls("America/Halifax")
                
                @schemas.classproperty
                def AMERICA_GLACE_BAY(cls):
                    return cls("America/Glace_Bay")
                
                @schemas.classproperty
                def AMERICA_MONCTON(cls):
                    return cls("America/Moncton")
                
                @schemas.classproperty
                def AMERICA_GOOSE_BAY(cls):
                    return cls("America/Goose_Bay")
                
                @schemas.classproperty
                def AMERICA_BLANCSABLON(cls):
                    return cls("America/Blanc-Sablon")
                
                @schemas.classproperty
                def AMERICA_TORONTO(cls):
                    return cls("America/Toronto")
                
                @schemas.classproperty
                def AMERICA_NIPIGON(cls):
                    return cls("America/Nipigon")
                
                @schemas.classproperty
                def AMERICA_THUNDER_BAY(cls):
                    return cls("America/Thunder_Bay")
                
                @schemas.classproperty
                def AMERICA_IQALUIT(cls):
                    return cls("America/Iqaluit")
                
                @schemas.classproperty
                def AMERICA_PANGNIRTUNG(cls):
                    return cls("America/Pangnirtung")
                
                @schemas.classproperty
                def AMERICA_ATIKOKAN(cls):
                    return cls("America/Atikokan")
                
                @schemas.classproperty
                def AMERICA_WINNIPEG(cls):
                    return cls("America/Winnipeg")
                
                @schemas.classproperty
                def AMERICA_RAINY_RIVER(cls):
                    return cls("America/Rainy_River")
                
                @schemas.classproperty
                def AMERICA_RESOLUTE(cls):
                    return cls("America/Resolute")
                
                @schemas.classproperty
                def AMERICA_RANKIN_INLET(cls):
                    return cls("America/Rankin_Inlet")
                
                @schemas.classproperty
                def AMERICA_REGINA(cls):
                    return cls("America/Regina")
                
                @schemas.classproperty
                def AMERICA_SWIFT_CURRENT(cls):
                    return cls("America/Swift_Current")
                
                @schemas.classproperty
                def AMERICA_EDMONTON(cls):
                    return cls("America/Edmonton")
                
                @schemas.classproperty
                def AMERICA_CAMBRIDGE_BAY(cls):
                    return cls("America/Cambridge_Bay")
                
                @schemas.classproperty
                def AMERICA_YELLOWKNIFE(cls):
                    return cls("America/Yellowknife")
                
                @schemas.classproperty
                def AMERICA_INUVIK(cls):
                    return cls("America/Inuvik")
                
                @schemas.classproperty
                def AMERICA_CRESTON(cls):
                    return cls("America/Creston")
                
                @schemas.classproperty
                def AMERICA_DAWSON_CREEK(cls):
                    return cls("America/Dawson_Creek")
                
                @schemas.classproperty
                def AMERICA_FORT_NELSON(cls):
                    return cls("America/Fort_Nelson")
                
                @schemas.classproperty
                def AMERICA_VANCOUVER(cls):
                    return cls("America/Vancouver")
                
                @schemas.classproperty
                def AMERICA_WHITEHORSE(cls):
                    return cls("America/Whitehorse")
                
                @schemas.classproperty
                def AMERICA_DAWSON(cls):
                    return cls("America/Dawson")
                
                @schemas.classproperty
                def INDIAN_COCOS(cls):
                    return cls("Indian/Cocos")
                
                @schemas.classproperty
                def EUROPE_ZURICH(cls):
                    return cls("Europe/Zurich")
                
                @schemas.classproperty
                def AFRICA_ABIDJAN(cls):
                    return cls("Africa/Abidjan")
                
                @schemas.classproperty
                def PACIFIC_RAROTONGA(cls):
                    return cls("Pacific/Rarotonga")
                
                @schemas.classproperty
                def AMERICA_SANTIAGO(cls):
                    return cls("America/Santiago")
                
                @schemas.classproperty
                def AMERICA_PUNTA_ARENAS(cls):
                    return cls("America/Punta_Arenas")
                
                @schemas.classproperty
                def PACIFIC_EASTER(cls):
                    return cls("Pacific/Easter")
                
                @schemas.classproperty
                def ASIA_SHANGHAI(cls):
                    return cls("Asia/Shanghai")
                
                @schemas.classproperty
                def ASIA_URUMQI(cls):
                    return cls("Asia/Urumqi")
                
                @schemas.classproperty
                def AMERICA_BOGOTA(cls):
                    return cls("America/Bogota")
                
                @schemas.classproperty
                def AMERICA_COSTA_RICA(cls):
                    return cls("America/Costa_Rica")
                
                @schemas.classproperty
                def AMERICA_HAVANA(cls):
                    return cls("America/Havana")
                
                @schemas.classproperty
                def ATLANTIC_CAPE_VERDE(cls):
                    return cls("Atlantic/Cape_Verde")
                
                @schemas.classproperty
                def AMERICA_CURACAO(cls):
                    return cls("America/Curacao")
                
                @schemas.classproperty
                def INDIAN_CHRISTMAS(cls):
                    return cls("Indian/Christmas")
                
                @schemas.classproperty
                def ASIA_NICOSIA(cls):
                    return cls("Asia/Nicosia")
                
                @schemas.classproperty
                def ASIA_FAMAGUSTA(cls):
                    return cls("Asia/Famagusta")
                
                @schemas.classproperty
                def EUROPE_PRAGUE(cls):
                    return cls("Europe/Prague")
                
                @schemas.classproperty
                def EUROPE_BERLIN(cls):
                    return cls("Europe/Berlin")
                
                @schemas.classproperty
                def EUROPE_COPENHAGEN(cls):
                    return cls("Europe/Copenhagen")
                
                @schemas.classproperty
                def AMERICA_SANTO_DOMINGO(cls):
                    return cls("America/Santo_Domingo")
                
                @schemas.classproperty
                def AFRICA_ALGIERS(cls):
                    return cls("Africa/Algiers")
                
                @schemas.classproperty
                def AMERICA_GUAYAQUIL(cls):
                    return cls("America/Guayaquil")
                
                @schemas.classproperty
                def PACIFIC_GALAPAGOS(cls):
                    return cls("Pacific/Galapagos")
                
                @schemas.classproperty
                def EUROPE_TALLINN(cls):
                    return cls("Europe/Tallinn")
                
                @schemas.classproperty
                def AFRICA_CAIRO(cls):
                    return cls("Africa/Cairo")
                
                @schemas.classproperty
                def AFRICA_EL_AAIUN(cls):
                    return cls("Africa/El_Aaiun")
                
                @schemas.classproperty
                def EUROPE_MADRID(cls):
                    return cls("Europe/Madrid")
                
                @schemas.classproperty
                def AFRICA_CEUTA(cls):
                    return cls("Africa/Ceuta")
                
                @schemas.classproperty
                def ATLANTIC_CANARY(cls):
                    return cls("Atlantic/Canary")
                
                @schemas.classproperty
                def EUROPE_HELSINKI(cls):
                    return cls("Europe/Helsinki")
                
                @schemas.classproperty
                def PACIFIC_FIJI(cls):
                    return cls("Pacific/Fiji")
                
                @schemas.classproperty
                def ATLANTIC_STANLEY(cls):
                    return cls("Atlantic/Stanley")
                
                @schemas.classproperty
                def PACIFIC_CHUUK(cls):
                    return cls("Pacific/Chuuk")
                
                @schemas.classproperty
                def PACIFIC_POHNPEI(cls):
                    return cls("Pacific/Pohnpei")
                
                @schemas.classproperty
                def PACIFIC_KOSRAE(cls):
                    return cls("Pacific/Kosrae")
                
                @schemas.classproperty
                def ATLANTIC_FAROE(cls):
                    return cls("Atlantic/Faroe")
                
                @schemas.classproperty
                def EUROPE_PARIS(cls):
                    return cls("Europe/Paris")
                
                @schemas.classproperty
                def EUROPE_LONDON(cls):
                    return cls("Europe/London")
                
                @schemas.classproperty
                def ASIA_TBILISI(cls):
                    return cls("Asia/Tbilisi")
                
                @schemas.classproperty
                def AMERICA_CAYENNE(cls):
                    return cls("America/Cayenne")
                
                @schemas.classproperty
                def AFRICA_ACCRA(cls):
                    return cls("Africa/Accra")
                
                @schemas.classproperty
                def EUROPE_GIBRALTAR(cls):
                    return cls("Europe/Gibraltar")
                
                @schemas.classproperty
                def AMERICA_GODTHAB(cls):
                    return cls("America/Godthab")
                
                @schemas.classproperty
                def AMERICA_DANMARKSHAVN(cls):
                    return cls("America/Danmarkshavn")
                
                @schemas.classproperty
                def AMERICA_SCORESBYSUND(cls):
                    return cls("America/Scoresbysund")
                
                @schemas.classproperty
                def AMERICA_THULE(cls):
                    return cls("America/Thule")
                
                @schemas.classproperty
                def EUROPE_ATHENS(cls):
                    return cls("Europe/Athens")
                
                @schemas.classproperty
                def ATLANTIC_SOUTH_GEORGIA(cls):
                    return cls("Atlantic/South_Georgia")
                
                @schemas.classproperty
                def AMERICA_GUATEMALA(cls):
                    return cls("America/Guatemala")
                
                @schemas.classproperty
                def PACIFIC_GUAM(cls):
                    return cls("Pacific/Guam")
                
                @schemas.classproperty
                def AFRICA_BISSAU(cls):
                    return cls("Africa/Bissau")
                
                @schemas.classproperty
                def AMERICA_GUYANA(cls):
                    return cls("America/Guyana")
                
                @schemas.classproperty
                def ASIA_HONG_KONG(cls):
                    return cls("Asia/Hong_Kong")
                
                @schemas.classproperty
                def AMERICA_TEGUCIGALPA(cls):
                    return cls("America/Tegucigalpa")
                
                @schemas.classproperty
                def AMERICA_PORTAUPRINCE(cls):
                    return cls("America/Port-au-Prince")
                
                @schemas.classproperty
                def EUROPE_BUDAPEST(cls):
                    return cls("Europe/Budapest")
                
                @schemas.classproperty
                def ASIA_JAKARTA(cls):
                    return cls("Asia/Jakarta")
                
                @schemas.classproperty
                def ASIA_PONTIANAK(cls):
                    return cls("Asia/Pontianak")
                
                @schemas.classproperty
                def ASIA_MAKASSAR(cls):
                    return cls("Asia/Makassar")
                
                @schemas.classproperty
                def ASIA_JAYAPURA(cls):
                    return cls("Asia/Jayapura")
                
                @schemas.classproperty
                def EUROPE_DUBLIN(cls):
                    return cls("Europe/Dublin")
                
                @schemas.classproperty
                def ASIA_JERUSALEM(cls):
                    return cls("Asia/Jerusalem")
                
                @schemas.classproperty
                def ASIA_KOLKATA(cls):
                    return cls("Asia/Kolkata")
                
                @schemas.classproperty
                def INDIAN_CHAGOS(cls):
                    return cls("Indian/Chagos")
                
                @schemas.classproperty
                def ASIA_BAGHDAD(cls):
                    return cls("Asia/Baghdad")
                
                @schemas.classproperty
                def ASIA_TEHRAN(cls):
                    return cls("Asia/Tehran")
                
                @schemas.classproperty
                def ATLANTIC_REYKJAVIK(cls):
                    return cls("Atlantic/Reykjavik")
                
                @schemas.classproperty
                def EUROPE_ROME(cls):
                    return cls("Europe/Rome")
                
                @schemas.classproperty
                def AMERICA_JAMAICA(cls):
                    return cls("America/Jamaica")
                
                @schemas.classproperty
                def ASIA_AMMAN(cls):
                    return cls("Asia/Amman")
                
                @schemas.classproperty
                def ASIA_TOKYO(cls):
                    return cls("Asia/Tokyo")
                
                @schemas.classproperty
                def AFRICA_NAIROBI(cls):
                    return cls("Africa/Nairobi")
                
                @schemas.classproperty
                def ASIA_BISHKEK(cls):
                    return cls("Asia/Bishkek")
                
                @schemas.classproperty
                def PACIFIC_TARAWA(cls):
                    return cls("Pacific/Tarawa")
                
                @schemas.classproperty
                def PACIFIC_ENDERBURY(cls):
                    return cls("Pacific/Enderbury")
                
                @schemas.classproperty
                def PACIFIC_KIRITIMATI(cls):
                    return cls("Pacific/Kiritimati")
                
                @schemas.classproperty
                def ASIA_PYONGYANG(cls):
                    return cls("Asia/Pyongyang")
                
                @schemas.classproperty
                def ASIA_SEOUL(cls):
                    return cls("Asia/Seoul")
                
                @schemas.classproperty
                def ASIA_ALMATY(cls):
                    return cls("Asia/Almaty")
                
                @schemas.classproperty
                def ASIA_QYZYLORDA(cls):
                    return cls("Asia/Qyzylorda")
                
                @schemas.classproperty
                def ASIA_QOSTANAY(cls):
                    return cls("Asia/Qostanay")
                
                @schemas.classproperty
                def ASIA_AQTOBE(cls):
                    return cls("Asia/Aqtobe")
                
                @schemas.classproperty
                def ASIA_AQTAU(cls):
                    return cls("Asia/Aqtau")
                
                @schemas.classproperty
                def ASIA_ATYRAU(cls):
                    return cls("Asia/Atyrau")
                
                @schemas.classproperty
                def ASIA_ORAL(cls):
                    return cls("Asia/Oral")
                
                @schemas.classproperty
                def ASIA_BEIRUT(cls):
                    return cls("Asia/Beirut")
                
                @schemas.classproperty
                def ASIA_COLOMBO(cls):
                    return cls("Asia/Colombo")
                
                @schemas.classproperty
                def AFRICA_MONROVIA(cls):
                    return cls("Africa/Monrovia")
                
                @schemas.classproperty
                def EUROPE_VILNIUS(cls):
                    return cls("Europe/Vilnius")
                
                @schemas.classproperty
                def EUROPE_LUXEMBOURG(cls):
                    return cls("Europe/Luxembourg")
                
                @schemas.classproperty
                def EUROPE_RIGA(cls):
                    return cls("Europe/Riga")
                
                @schemas.classproperty
                def AFRICA_TRIPOLI(cls):
                    return cls("Africa/Tripoli")
                
                @schemas.classproperty
                def AFRICA_CASABLANCA(cls):
                    return cls("Africa/Casablanca")
                
                @schemas.classproperty
                def EUROPE_MONACO(cls):
                    return cls("Europe/Monaco")
                
                @schemas.classproperty
                def EUROPE_CHISINAU(cls):
                    return cls("Europe/Chisinau")
                
                @schemas.classproperty
                def PACIFIC_MAJURO(cls):
                    return cls("Pacific/Majuro")
                
                @schemas.classproperty
                def PACIFIC_KWAJALEIN(cls):
                    return cls("Pacific/Kwajalein")
                
                @schemas.classproperty
                def ASIA_YANGON(cls):
                    return cls("Asia/Yangon")
                
                @schemas.classproperty
                def ASIA_ULAANBAATAR(cls):
                    return cls("Asia/Ulaanbaatar")
                
                @schemas.classproperty
                def ASIA_HOVD(cls):
                    return cls("Asia/Hovd")
                
                @schemas.classproperty
                def ASIA_CHOIBALSAN(cls):
                    return cls("Asia/Choibalsan")
                
                @schemas.classproperty
                def ASIA_MACAU(cls):
                    return cls("Asia/Macau")
                
                @schemas.classproperty
                def AMERICA_MARTINIQUE(cls):
                    return cls("America/Martinique")
                
                @schemas.classproperty
                def EUROPE_MALTA(cls):
                    return cls("Europe/Malta")
                
                @schemas.classproperty
                def INDIAN_MAURITIUS(cls):
                    return cls("Indian/Mauritius")
                
                @schemas.classproperty
                def INDIAN_MALDIVES(cls):
                    return cls("Indian/Maldives")
                
                @schemas.classproperty
                def AMERICA_MEXICO_CITY(cls):
                    return cls("America/Mexico_City")
                
                @schemas.classproperty
                def AMERICA_CANCUN(cls):
                    return cls("America/Cancun")
                
                @schemas.classproperty
                def AMERICA_MERIDA(cls):
                    return cls("America/Merida")
                
                @schemas.classproperty
                def AMERICA_MONTERREY(cls):
                    return cls("America/Monterrey")
                
                @schemas.classproperty
                def AMERICA_MATAMOROS(cls):
                    return cls("America/Matamoros")
                
                @schemas.classproperty
                def AMERICA_MAZATLAN(cls):
                    return cls("America/Mazatlan")
                
                @schemas.classproperty
                def AMERICA_CHIHUAHUA(cls):
                    return cls("America/Chihuahua")
                
                @schemas.classproperty
                def AMERICA_OJINAGA(cls):
                    return cls("America/Ojinaga")
                
                @schemas.classproperty
                def AMERICA_HERMOSILLO(cls):
                    return cls("America/Hermosillo")
                
                @schemas.classproperty
                def AMERICA_TIJUANA(cls):
                    return cls("America/Tijuana")
                
                @schemas.classproperty
                def AMERICA_BAHIA_BANDERAS(cls):
                    return cls("America/Bahia_Banderas")
                
                @schemas.classproperty
                def ASIA_KUALA_LUMPUR(cls):
                    return cls("Asia/Kuala_Lumpur")
                
                @schemas.classproperty
                def ASIA_KUCHING(cls):
                    return cls("Asia/Kuching")
                
                @schemas.classproperty
                def AFRICA_MAPUTO(cls):
                    return cls("Africa/Maputo")
                
                @schemas.classproperty
                def AFRICA_WINDHOEK(cls):
                    return cls("Africa/Windhoek")
                
                @schemas.classproperty
                def PACIFIC_NOUMEA(cls):
                    return cls("Pacific/Noumea")
                
                @schemas.classproperty
                def PACIFIC_NORFOLK(cls):
                    return cls("Pacific/Norfolk")
                
                @schemas.classproperty
                def AFRICA_LAGOS(cls):
                    return cls("Africa/Lagos")
                
                @schemas.classproperty
                def AMERICA_MANAGUA(cls):
                    return cls("America/Managua")
                
                @schemas.classproperty
                def EUROPE_AMSTERDAM(cls):
                    return cls("Europe/Amsterdam")
                
                @schemas.classproperty
                def EUROPE_OSLO(cls):
                    return cls("Europe/Oslo")
                
                @schemas.classproperty
                def ASIA_KATHMANDU(cls):
                    return cls("Asia/Kathmandu")
                
                @schemas.classproperty
                def PACIFIC_NAURU(cls):
                    return cls("Pacific/Nauru")
                
                @schemas.classproperty
                def PACIFIC_NIUE(cls):
                    return cls("Pacific/Niue")
                
                @schemas.classproperty
                def PACIFIC_AUCKLAND(cls):
                    return cls("Pacific/Auckland")
                
                @schemas.classproperty
                def PACIFIC_CHATHAM(cls):
                    return cls("Pacific/Chatham")
                
                @schemas.classproperty
                def AMERICA_PANAMA(cls):
                    return cls("America/Panama")
                
                @schemas.classproperty
                def AMERICA_LIMA(cls):
                    return cls("America/Lima")
                
                @schemas.classproperty
                def PACIFIC_TAHITI(cls):
                    return cls("Pacific/Tahiti")
                
                @schemas.classproperty
                def PACIFIC_MARQUESAS(cls):
                    return cls("Pacific/Marquesas")
                
                @schemas.classproperty
                def PACIFIC_GAMBIER(cls):
                    return cls("Pacific/Gambier")
                
                @schemas.classproperty
                def PACIFIC_PORT_MORESBY(cls):
                    return cls("Pacific/Port_Moresby")
                
                @schemas.classproperty
                def PACIFIC_BOUGAINVILLE(cls):
                    return cls("Pacific/Bougainville")
                
                @schemas.classproperty
                def ASIA_MANILA(cls):
                    return cls("Asia/Manila")
                
                @schemas.classproperty
                def ASIA_KARACHI(cls):
                    return cls("Asia/Karachi")
                
                @schemas.classproperty
                def EUROPE_WARSAW(cls):
                    return cls("Europe/Warsaw")
                
                @schemas.classproperty
                def AMERICA_MIQUELON(cls):
                    return cls("America/Miquelon")
                
                @schemas.classproperty
                def PACIFIC_PITCAIRN(cls):
                    return cls("Pacific/Pitcairn")
                
                @schemas.classproperty
                def AMERICA_PUERTO_RICO(cls):
                    return cls("America/Puerto_Rico")
                
                @schemas.classproperty
                def ASIA_GAZA(cls):
                    return cls("Asia/Gaza")
                
                @schemas.classproperty
                def ASIA_HEBRON(cls):
                    return cls("Asia/Hebron")
                
                @schemas.classproperty
                def EUROPE_LISBON(cls):
                    return cls("Europe/Lisbon")
                
                @schemas.classproperty
                def ATLANTIC_MADEIRA(cls):
                    return cls("Atlantic/Madeira")
                
                @schemas.classproperty
                def ATLANTIC_AZORES(cls):
                    return cls("Atlantic/Azores")
                
                @schemas.classproperty
                def PACIFIC_PALAU(cls):
                    return cls("Pacific/Palau")
                
                @schemas.classproperty
                def AMERICA_ASUNCION(cls):
                    return cls("America/Asuncion")
                
                @schemas.classproperty
                def ASIA_QATAR(cls):
                    return cls("Asia/Qatar")
                
                @schemas.classproperty
                def INDIAN_REUNION(cls):
                    return cls("Indian/Reunion")
                
                @schemas.classproperty
                def EUROPE_BUCHAREST(cls):
                    return cls("Europe/Bucharest")
                
                @schemas.classproperty
                def EUROPE_BELGRADE(cls):
                    return cls("Europe/Belgrade")
                
                @schemas.classproperty
                def EUROPE_KALININGRAD(cls):
                    return cls("Europe/Kaliningrad")
                
                @schemas.classproperty
                def EUROPE_MOSCOW(cls):
                    return cls("Europe/Moscow")
                
                @schemas.classproperty
                def EUROPE_SIMFEROPOL(cls):
                    return cls("Europe/Simferopol")
                
                @schemas.classproperty
                def EUROPE_KIROV(cls):
                    return cls("Europe/Kirov")
                
                @schemas.classproperty
                def EUROPE_ASTRAKHAN(cls):
                    return cls("Europe/Astrakhan")
                
                @schemas.classproperty
                def EUROPE_VOLGOGRAD(cls):
                    return cls("Europe/Volgograd")
                
                @schemas.classproperty
                def EUROPE_SARATOV(cls):
                    return cls("Europe/Saratov")
                
                @schemas.classproperty
                def EUROPE_ULYANOVSK(cls):
                    return cls("Europe/Ulyanovsk")
                
                @schemas.classproperty
                def EUROPE_SAMARA(cls):
                    return cls("Europe/Samara")
                
                @schemas.classproperty
                def ASIA_YEKATERINBURG(cls):
                    return cls("Asia/Yekaterinburg")
                
                @schemas.classproperty
                def ASIA_OMSK(cls):
                    return cls("Asia/Omsk")
                
                @schemas.classproperty
                def ASIA_NOVOSIBIRSK(cls):
                    return cls("Asia/Novosibirsk")
                
                @schemas.classproperty
                def ASIA_BARNAUL(cls):
                    return cls("Asia/Barnaul")
                
                @schemas.classproperty
                def ASIA_TOMSK(cls):
                    return cls("Asia/Tomsk")
                
                @schemas.classproperty
                def ASIA_NOVOKUZNETSK(cls):
                    return cls("Asia/Novokuznetsk")
                
                @schemas.classproperty
                def ASIA_KRASNOYARSK(cls):
                    return cls("Asia/Krasnoyarsk")
                
                @schemas.classproperty
                def ASIA_IRKUTSK(cls):
                    return cls("Asia/Irkutsk")
                
                @schemas.classproperty
                def ASIA_CHITA(cls):
                    return cls("Asia/Chita")
                
                @schemas.classproperty
                def ASIA_YAKUTSK(cls):
                    return cls("Asia/Yakutsk")
                
                @schemas.classproperty
                def ASIA_KHANDYGA(cls):
                    return cls("Asia/Khandyga")
                
                @schemas.classproperty
                def ASIA_VLADIVOSTOK(cls):
                    return cls("Asia/Vladivostok")
                
                @schemas.classproperty
                def ASIA_USTNERA(cls):
                    return cls("Asia/Ust-Nera")
                
                @schemas.classproperty
                def ASIA_MAGADAN(cls):
                    return cls("Asia/Magadan")
                
                @schemas.classproperty
                def ASIA_SAKHALIN(cls):
                    return cls("Asia/Sakhalin")
                
                @schemas.classproperty
                def ASIA_SREDNEKOLYMSK(cls):
                    return cls("Asia/Srednekolymsk")
                
                @schemas.classproperty
                def ASIA_KAMCHATKA(cls):
                    return cls("Asia/Kamchatka")
                
                @schemas.classproperty
                def ASIA_ANADYR(cls):
                    return cls("Asia/Anadyr")
                
                @schemas.classproperty
                def ASIA_RIYADH(cls):
                    return cls("Asia/Riyadh")
                
                @schemas.classproperty
                def PACIFIC_GUADALCANAL(cls):
                    return cls("Pacific/Guadalcanal")
                
                @schemas.classproperty
                def INDIAN_MAHE(cls):
                    return cls("Indian/Mahe")
                
                @schemas.classproperty
                def AFRICA_KHARTOUM(cls):
                    return cls("Africa/Khartoum")
                
                @schemas.classproperty
                def EUROPE_STOCKHOLM(cls):
                    return cls("Europe/Stockholm")
                
                @schemas.classproperty
                def ASIA_SINGAPORE(cls):
                    return cls("Asia/Singapore")
                
                @schemas.classproperty
                def AMERICA_PARAMARIBO(cls):
                    return cls("America/Paramaribo")
                
                @schemas.classproperty
                def AFRICA_JUBA(cls):
                    return cls("Africa/Juba")
                
                @schemas.classproperty
                def AFRICA_SAO_TOME(cls):
                    return cls("Africa/Sao_Tome")
                
                @schemas.classproperty
                def AMERICA_EL_SALVADOR(cls):
                    return cls("America/El_Salvador")
                
                @schemas.classproperty
                def ASIA_DAMASCUS(cls):
                    return cls("Asia/Damascus")
                
                @schemas.classproperty
                def AMERICA_GRAND_TURK(cls):
                    return cls("America/Grand_Turk")
                
                @schemas.classproperty
                def AFRICA_NDJAMENA(cls):
                    return cls("Africa/Ndjamena")
                
                @schemas.classproperty
                def INDIAN_KERGUELEN(cls):
                    return cls("Indian/Kerguelen")
                
                @schemas.classproperty
                def ASIA_BANGKOK(cls):
                    return cls("Asia/Bangkok")
                
                @schemas.classproperty
                def ASIA_DUSHANBE(cls):
                    return cls("Asia/Dushanbe")
                
                @schemas.classproperty
                def PACIFIC_FAKAOFO(cls):
                    return cls("Pacific/Fakaofo")
                
                @schemas.classproperty
                def ASIA_DILI(cls):
                    return cls("Asia/Dili")
                
                @schemas.classproperty
                def ASIA_ASHGABAT(cls):
                    return cls("Asia/Ashgabat")
                
                @schemas.classproperty
                def AFRICA_TUNIS(cls):
                    return cls("Africa/Tunis")
                
                @schemas.classproperty
                def PACIFIC_TONGATAPU(cls):
                    return cls("Pacific/Tongatapu")
                
                @schemas.classproperty
                def EUROPE_ISTANBUL(cls):
                    return cls("Europe/Istanbul")
                
                @schemas.classproperty
                def AMERICA_PORT_OF_SPAIN(cls):
                    return cls("America/Port_of_Spain")
                
                @schemas.classproperty
                def PACIFIC_FUNAFUTI(cls):
                    return cls("Pacific/Funafuti")
                
                @schemas.classproperty
                def ASIA_TAIPEI(cls):
                    return cls("Asia/Taipei")
                
                @schemas.classproperty
                def EUROPE_KIEV(cls):
                    return cls("Europe/Kiev")
                
                @schemas.classproperty
                def EUROPE_UZHGOROD(cls):
                    return cls("Europe/Uzhgorod")
                
                @schemas.classproperty
                def EUROPE_ZAPOROZHYE(cls):
                    return cls("Europe/Zaporozhye")
                
                @schemas.classproperty
                def PACIFIC_WAKE(cls):
                    return cls("Pacific/Wake")
                
                @schemas.classproperty
                def AMERICA_NEW_YORK(cls):
                    return cls("America/New_York")
                
                @schemas.classproperty
                def AMERICA_DETROIT(cls):
                    return cls("America/Detroit")
                
                @schemas.classproperty
                def AMERICA_KENTUCKY_LOUISVILLE(cls):
                    return cls("America/Kentucky/Louisville")
                
                @schemas.classproperty
                def AMERICA_KENTUCKY_MONTICELLO(cls):
                    return cls("America/Kentucky/Monticello")
                
                @schemas.classproperty
                def AMERICA_INDIANA_INDIANAPOLIS(cls):
                    return cls("America/Indiana/Indianapolis")
                
                @schemas.classproperty
                def AMERICA_INDIANA_VINCENNES(cls):
                    return cls("America/Indiana/Vincennes")
                
                @schemas.classproperty
                def AMERICA_INDIANA_WINAMAC(cls):
                    return cls("America/Indiana/Winamac")
                
                @schemas.classproperty
                def AMERICA_INDIANA_MARENGO(cls):
                    return cls("America/Indiana/Marengo")
                
                @schemas.classproperty
                def AMERICA_INDIANA_PETERSBURG(cls):
                    return cls("America/Indiana/Petersburg")
                
                @schemas.classproperty
                def AMERICA_INDIANA_VEVAY(cls):
                    return cls("America/Indiana/Vevay")
                
                @schemas.classproperty
                def AMERICA_CHICAGO(cls):
                    return cls("America/Chicago")
                
                @schemas.classproperty
                def AMERICA_INDIANA_TELL_CITY(cls):
                    return cls("America/Indiana/Tell_City")
                
                @schemas.classproperty
                def AMERICA_INDIANA_KNOX(cls):
                    return cls("America/Indiana/Knox")
                
                @schemas.classproperty
                def AMERICA_MENOMINEE(cls):
                    return cls("America/Menominee")
                
                @schemas.classproperty
                def AMERICA_NORTH_DAKOTA_CENTER(cls):
                    return cls("America/North_Dakota/Center")
                
                @schemas.classproperty
                def AMERICA_NORTH_DAKOTA_NEW_SALEM(cls):
                    return cls("America/North_Dakota/New_Salem")
                
                @schemas.classproperty
                def AMERICA_NORTH_DAKOTA_BEULAH(cls):
                    return cls("America/North_Dakota/Beulah")
                
                @schemas.classproperty
                def AMERICA_DENVER(cls):
                    return cls("America/Denver")
                
                @schemas.classproperty
                def AMERICA_BOISE(cls):
                    return cls("America/Boise")
                
                @schemas.classproperty
                def AMERICA_PHOENIX(cls):
                    return cls("America/Phoenix")
                
                @schemas.classproperty
                def AMERICA_LOS_ANGELES(cls):
                    return cls("America/Los_Angeles")
                
                @schemas.classproperty
                def AMERICA_ANCHORAGE(cls):
                    return cls("America/Anchorage")
                
                @schemas.classproperty
                def AMERICA_JUNEAU(cls):
                    return cls("America/Juneau")
                
                @schemas.classproperty
                def AMERICA_SITKA(cls):
                    return cls("America/Sitka")
                
                @schemas.classproperty
                def AMERICA_METLAKATLA(cls):
                    return cls("America/Metlakatla")
                
                @schemas.classproperty
                def AMERICA_YAKUTAT(cls):
                    return cls("America/Yakutat")
                
                @schemas.classproperty
                def AMERICA_NOME(cls):
                    return cls("America/Nome")
                
                @schemas.classproperty
                def AMERICA_ADAK(cls):
                    return cls("America/Adak")
                
                @schemas.classproperty
                def PACIFIC_HONOLULU(cls):
                    return cls("Pacific/Honolulu")
                
                @schemas.classproperty
                def AMERICA_MONTEVIDEO(cls):
                    return cls("America/Montevideo")
                
                @schemas.classproperty
                def ASIA_SAMARKAND(cls):
                    return cls("Asia/Samarkand")
                
                @schemas.classproperty
                def ASIA_TASHKENT(cls):
                    return cls("Asia/Tashkent")
                
                @schemas.classproperty
                def AMERICA_CARACAS(cls):
                    return cls("America/Caracas")
                
                @schemas.classproperty
                def ASIA_HO_CHI_MINH(cls):
                    return cls("Asia/Ho_Chi_Minh")
                
                @schemas.classproperty
                def PACIFIC_EFATE(cls):
                    return cls("Pacific/Efate")
                
                @schemas.classproperty
                def PACIFIC_WALLIS(cls):
                    return cls("Pacific/Wallis")
                
                @schemas.classproperty
                def PACIFIC_APIA(cls):
                    return cls("Pacific/Apia")
                
                @schemas.classproperty
                def AFRICA_JOHANNESBURG(cls):
                    return cls("Africa/Johannesburg")
            
            
            class sunday(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class schedules(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            start = schemas.DateTimeSchema
                                            end = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "start": start,
                                                "end": end,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
                                        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            start=start,
                                            end=end,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'schedules':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "schedules": schedules,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> typing.Union[MetaOapg.properties.schedules, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'sunday':
                    return super().__new__(
                        cls,
                        *_args,
                        schedules=schedules,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class monday(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class schedules(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            start = schemas.DateTimeSchema
                                            end = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "start": start,
                                                "end": end,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
                                        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            start=start,
                                            end=end,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'schedules':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "schedules": schedules,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> typing.Union[MetaOapg.properties.schedules, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'monday':
                    return super().__new__(
                        cls,
                        *_args,
                        schedules=schedules,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tuesday(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class schedules(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            start = schemas.DateTimeSchema
                                            end = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "start": start,
                                                "end": end,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
                                        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            start=start,
                                            end=end,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'schedules':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "schedules": schedules,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> typing.Union[MetaOapg.properties.schedules, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tuesday':
                    return super().__new__(
                        cls,
                        *_args,
                        schedules=schedules,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class wednesday(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class schedules(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            start = schemas.DateTimeSchema
                                            end = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "start": start,
                                                "end": end,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
                                        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            start=start,
                                            end=end,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'schedules':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "schedules": schedules,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> typing.Union[MetaOapg.properties.schedules, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'wednesday':
                    return super().__new__(
                        cls,
                        *_args,
                        schedules=schedules,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class thursday(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class schedules(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            start = schemas.DateTimeSchema
                                            end = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "start": start,
                                                "end": end,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
                                        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            start=start,
                                            end=end,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'schedules':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "schedules": schedules,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> typing.Union[MetaOapg.properties.schedules, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'thursday':
                    return super().__new__(
                        cls,
                        *_args,
                        schedules=schedules,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class friday(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class schedules(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            start = schemas.DateTimeSchema
                                            end = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "start": start,
                                                "end": end,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
                                        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            start=start,
                                            end=end,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'schedules':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "schedules": schedules,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> typing.Union[MetaOapg.properties.schedules, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'friday':
                    return super().__new__(
                        cls,
                        *_args,
                        schedules=schedules,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class saturday(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class schedules(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            start = schemas.DateTimeSchema
                                            end = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "start": start,
                                                "end": end,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
                                        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            start=start,
                                            end=end,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'schedules':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "schedules": schedules,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> typing.Union[MetaOapg.properties.schedules, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schedules", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'saturday':
                    return super().__new__(
                        cls,
                        *_args,
                        schedules=schedules,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "name": name,
                "timezone": timezone,
                "sunday": sunday,
                "monday": monday,
                "tuesday": tuesday,
                "wednesday": wednesday,
                "thursday": thursday,
                "friday": friday,
                "saturday": saturday,
            }
    
    sunday: MetaOapg.properties.sunday
    saturday: MetaOapg.properties.saturday
    tuesday: MetaOapg.properties.tuesday
    timezone: MetaOapg.properties.timezone
    name: MetaOapg.properties.name
    friday: MetaOapg.properties.friday
    thursday: MetaOapg.properties.thursday
    wednesday: MetaOapg.properties.wednesday
    monday: MetaOapg.properties.monday
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sunday"]) -> MetaOapg.properties.sunday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monday"]) -> MetaOapg.properties.monday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tuesday"]) -> MetaOapg.properties.tuesday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wednesday"]) -> MetaOapg.properties.wednesday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thursday"]) -> MetaOapg.properties.thursday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["friday"]) -> MetaOapg.properties.friday: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saturday"]) -> MetaOapg.properties.saturday: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "timezone", "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sunday"]) -> MetaOapg.properties.sunday: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monday"]) -> MetaOapg.properties.monday: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tuesday"]) -> MetaOapg.properties.tuesday: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wednesday"]) -> MetaOapg.properties.wednesday: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thursday"]) -> MetaOapg.properties.thursday: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["friday"]) -> MetaOapg.properties.friday: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saturday"]) -> MetaOapg.properties.saturday: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "timezone", "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sunday: typing.Union[MetaOapg.properties.sunday, dict, frozendict.frozendict, ],
        saturday: typing.Union[MetaOapg.properties.saturday, dict, frozendict.frozendict, ],
        tuesday: typing.Union[MetaOapg.properties.tuesday, dict, frozendict.frozendict, ],
        timezone: typing.Union[MetaOapg.properties.timezone, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        friday: typing.Union[MetaOapg.properties.friday, dict, frozendict.frozendict, ],
        thursday: typing.Union[MetaOapg.properties.thursday, dict, frozendict.frozendict, ],
        wednesday: typing.Union[MetaOapg.properties.wednesday, dict, frozendict.frozendict, ],
        monday: typing.Union[MetaOapg.properties.monday, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeschedulesCreateOrPatch':
        return super().__new__(
            cls,
            *_args,
            sunday=sunday,
            saturday=saturday,
            tuesday=tuesday,
            timezone=timezone,
            name=name,
            friday=friday,
            thursday=thursday,
            wednesday=wednesday,
            monday=monday,
            _configuration=_configuration,
            **kwargs,
        )
