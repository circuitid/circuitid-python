# coding: utf-8

"""
    Circuit ID REST API

    # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!  # noqa: E501

    The version of the OpenAPI document: 0.47.21
    Contact: support@circuitid.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circuitid_python import schemas  # noqa: F401


class NumberportsCreateOrPatch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "accountPhoneNumber",
            "typeOfService",
            "name",
            "numbers",
            "destinationType",
            "office",
            "accountNumber",
            "authorizedPerson",
            "desiredDueDate",
        }
        
        class properties:
            
            
            class numbers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'numbers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class typeOfService(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("business")
                
                @schemas.classproperty
                def RESIDENCE(cls):
                    return cls("residence")
            
            
            class authorizedPerson(
                schemas.StrSchema
            ):
                pass
            desiredDueDate = schemas.DateTimeSchema
            
            
            class accountNumber(
                schemas.StrSchema
            ):
                pass
            
            
            class accountPhoneNumber(
                schemas.StrSchema
            ):
                pass
            office = schemas.StrSchema
            
            
            class destinationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ANNOUNCEMENTS(cls):
                    return cls("announcements")
                
                @schemas.classproperty
                def DIRECTORIES(cls):
                    return cls("directories")
                
                @schemas.classproperty
                def PARK(cls):
                    return cls("park")
                
                @schemas.classproperty
                def NUMBERS(cls):
                    return cls("numbers")
                
                @schemas.classproperty
                def MENUS(cls):
                    return cls("menus")
                
                @schemas.classproperty
                def USERS(cls):
                    return cls("users")
                
                @schemas.classproperty
                def SERVERS(cls):
                    return cls("servers")
                
                @schemas.classproperty
                def INBOUNDRULES(cls):
                    return cls("inboundrules")
                
                @schemas.classproperty
                def CALLQUEUES(cls):
                    return cls("callqueues")
                
                @schemas.classproperty
                def FAXACCOUNTS(cls):
                    return cls("faxaccounts")
                
                @schemas.classproperty
                def CALLFORWARDING(cls):
                    return cls("callforwarding")
                
                @schemas.classproperty
                def HANGUP(cls):
                    return cls("hangup")
                
                @schemas.classproperty
                def PHONEINBOUNDRULES(cls):
                    return cls("phoneinboundrules")
                
                @schemas.classproperty
                def VOICEMAILACCOUNTS(cls):
                    return cls("voicemailaccounts")
            
            
            class e911(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
            destination = schemas.StrSchema
            
            
            class callForwardingDestination(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "numbers": numbers,
                "name": name,
                "typeOfService": typeOfService,
                "authorizedPerson": authorizedPerson,
                "desiredDueDate": desiredDueDate,
                "accountNumber": accountNumber,
                "accountPhoneNumber": accountPhoneNumber,
                "office": office,
                "destinationType": destinationType,
                "e911": e911,
                "destination": destination,
                "callForwardingDestination": callForwardingDestination,
            }
    
    accountPhoneNumber: MetaOapg.properties.accountPhoneNumber
    typeOfService: MetaOapg.properties.typeOfService
    name: MetaOapg.properties.name
    numbers: MetaOapg.properties.numbers
    destinationType: MetaOapg.properties.destinationType
    office: MetaOapg.properties.office
    accountNumber: MetaOapg.properties.accountNumber
    authorizedPerson: MetaOapg.properties.authorizedPerson
    desiredDueDate: MetaOapg.properties.desiredDueDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numbers"]) -> MetaOapg.properties.numbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeOfService"]) -> MetaOapg.properties.typeOfService: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizedPerson"]) -> MetaOapg.properties.authorizedPerson: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desiredDueDate"]) -> MetaOapg.properties.desiredDueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountPhoneNumber"]) -> MetaOapg.properties.accountPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["office"]) -> MetaOapg.properties.office: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationType"]) -> MetaOapg.properties.destinationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["e911"]) -> MetaOapg.properties.e911: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> MetaOapg.properties.destination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callForwardingDestination"]) -> MetaOapg.properties.callForwardingDestination: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["numbers", "name", "typeOfService", "authorizedPerson", "desiredDueDate", "accountNumber", "accountPhoneNumber", "office", "destinationType", "e911", "destination", "callForwardingDestination", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numbers"]) -> MetaOapg.properties.numbers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeOfService"]) -> MetaOapg.properties.typeOfService: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizedPerson"]) -> MetaOapg.properties.authorizedPerson: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desiredDueDate"]) -> MetaOapg.properties.desiredDueDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountPhoneNumber"]) -> MetaOapg.properties.accountPhoneNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["office"]) -> MetaOapg.properties.office: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationType"]) -> MetaOapg.properties.destinationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["e911"]) -> typing.Union[MetaOapg.properties.e911, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> typing.Union[MetaOapg.properties.destination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callForwardingDestination"]) -> typing.Union[MetaOapg.properties.callForwardingDestination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["numbers", "name", "typeOfService", "authorizedPerson", "desiredDueDate", "accountNumber", "accountPhoneNumber", "office", "destinationType", "e911", "destination", "callForwardingDestination", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accountPhoneNumber: typing.Union[MetaOapg.properties.accountPhoneNumber, str, ],
        typeOfService: typing.Union[MetaOapg.properties.typeOfService, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        numbers: typing.Union[MetaOapg.properties.numbers, list, tuple, ],
        destinationType: typing.Union[MetaOapg.properties.destinationType, str, ],
        office: typing.Union[MetaOapg.properties.office, str, ],
        accountNumber: typing.Union[MetaOapg.properties.accountNumber, str, ],
        authorizedPerson: typing.Union[MetaOapg.properties.authorizedPerson, str, ],
        desiredDueDate: typing.Union[MetaOapg.properties.desiredDueDate, str, datetime, ],
        e911: typing.Union[MetaOapg.properties.e911, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        destination: typing.Union[MetaOapg.properties.destination, str, schemas.Unset] = schemas.unset,
        callForwardingDestination: typing.Union[MetaOapg.properties.callForwardingDestination, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NumberportsCreateOrPatch':
        return super().__new__(
            cls,
            *_args,
            accountPhoneNumber=accountPhoneNumber,
            typeOfService=typeOfService,
            name=name,
            numbers=numbers,
            destinationType=destinationType,
            office=office,
            accountNumber=accountNumber,
            authorizedPerson=authorizedPerson,
            desiredDueDate=desiredDueDate,
            e911=e911,
            destination=destination,
            callForwardingDestination=callForwardingDestination,
            _configuration=_configuration,
            **kwargs,
        )
